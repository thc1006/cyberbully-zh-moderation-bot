name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 1 * * 1'  # Weekly Monday 1 AM UTC

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.8.3'

jobs:
  # Fast syntax and import check
  quick-check:
    name: Quick Syntax Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install minimal deps
      run: python -m pip install --upgrade pip ast-check flake8
    - name: Syntax check
      run: |
        python -m py_compile src/cyberpuppy/**/*.py
        flake8 src/ --select=E9,F63,F7,F82 --show-source --statistics

  # Core testing matrix
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: quick-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt

    - name: Run tests
      run: pytest tests/ --cov=src/cyberpuppy --cov-report=xml --cov-report=term-missing --junitxml=junit.xml -v --tb=short

    - name: Upload coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit.xml
          coverage.xml

  # Code quality (parallel with tests)
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: quick-check
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy bandit safety
    - name: Format check
      run: black --check --diff src/ tests/ api/ bot/
    - name: Lint
      run: flake8 src/ tests/ api/ bot/
    - name: Sort imports
      run: isort --check-only --diff src/ tests/ api/ bot/
    - name: Type check
      run: mypy src/ api/ bot/ --ignore-missing-imports
    - name: Security scan
      run: |
        bandit -r src/ api/ bot/ -ll
        safety check --ignore 70612

  # Integration tests (ubuntu only)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    - name: Setup environment
      run: |
        cp .env.example .env || echo "REDIS_URL=redis://localhost:6379" > .env
    - name: Run integration tests
      run: pytest tests/integration/ -v --tb=short

  # Docker build (ubuntu only)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - name: Build API
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: false
        tags: cyberpuppy-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Build Bot
      uses: docker/build-push-action@v5
      with:
        context: ./bot
        push: false
        tags: cyberpuppy-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Test containers
      run: |
        docker run --rm cyberpuppy-api:test python -c "import fastapi; print('API OK')"
        docker run --rm cyberpuppy-bot:test python -c "import linebot; print('Bot OK')"

  # Performance tests (main branch only)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt pytest-benchmark
    - name: Run benchmarks
      run: pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json
    - name: Upload results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json

  # Summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, quality, integration, docker]
    if: always()
    steps:
    - name: Check results
      run: |
        echo "## 🎯 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Quality | ${{ needs.quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | ${{ needs.integration.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
    - name: Fail if critical jobs failed
      if: needs.test.result != 'success' || needs.quality.result != 'success'
      run: exit 1