services:
  # API 服務
  api:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: cyberpuppy-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONIOENCODING=utf-8
      - MODEL_CACHE_DIR=/app/models
      - DATA_DIR=/app/data
      - LOG_LEVEL=INFO
      - MAX_WORKERS=4
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data:ro
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - cyberpuppy-network

  # LINE Bot 服務 (可選)
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: cyberpuppy-bot
    ports:
      - "5000:5000"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONIOENCODING=utf-8
      - API_ENDPOINT=http://api:8000
      - LINE_CHANNEL_SECRET=${LINE_CHANNEL_SECRET:-}
      - LINE_CHANNEL_ACCESS_TOKEN=${LINE_CHANNEL_ACCESS_TOKEN:-}
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - cyberpuppy-network
    profiles:
      - with-bot

  # Redis 快取服務 (可選)
  redis:
    image: redis:7-alpine
    container_name: cyberpuppy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - cyberpuppy-network
    profiles:
      - with-cache

  # Nginx 反向代理 (生產環境)
  nginx:
    image: nginx:alpine
    container_name: cyberpuppy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - cyberpuppy-network
    profiles:
      - production

networks:
  cyberpuppy-network:
    driver: bridge

volumes:
  redis-data: