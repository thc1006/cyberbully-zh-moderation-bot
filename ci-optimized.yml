name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 避免同分支重複跑（新 run 會取消舊 run）
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PIP_NO_CACHE_DIR: 1
  PYTHONUNBUFFERED: 1

jobs:
  # 0) 基礎測試 - 快速失敗，用來早期回饋
  basic-tests:
    name: Basic Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install core dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Run basic unit tests
        run: |
          # 若尚未導入 markers，先用檔名範圍跑基礎測試
          pytest tests/test_*.py -v --tb=short --maxfail=5 -x

  # 1) 完整單元測試（可擴 OS / Python matrix）
  unit-tests:
    name: Unit (${{ matrix.os }} / Py ${{ matrix.python-version }})
    needs: basic-tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Run unit tests with coverage
        run: |
          # 若已導入 markers：改為 -m "unit and not integration and not docker"
          pytest tests/ --ignore=tests/integration/ --cov=src/cyberpuppy --cov-report=xml --cov-report=term-missing --tb=short -v
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        if: ${{ matrix.python-version == '3.11' }}
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          # 私有或受保護情境建議加上 token
          token: ${{ secrets.CODECOV_TOKEN }}

  # 2) 整合測試（Linux；Service Containers）
  integration-tests:
    name: Integration (Redis service)
    needs: unit-tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      redis:
        image: redis:7-alpine
        ports: [ "6379:6379" ] # 非必需，但保留亦可
        options: >-
          --health-cmd "redis-cli -h redis ping || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=30
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Set up test environment
        run: |
          cp -f .env.example .env
          echo "REDIS_URL=redis://redis:6379" >> .env   # 使用服務主機名 redis
          echo "ENVIRONMENT=testing" >> .env
          echo "TESTING=1" >> .env
      - name: Run integration tests (retry once on flake)
        run: |
          set -e
          # 若已導入 markers：pytest -m "integration and not docker" -v --tb=short
          pytest tests/integration/ -v --tb=short || (echo "retrying..." && sleep 5 && pytest tests/integration/ -v --tb=short)

  # 3) Docker 建構／輕量執行測試（Linux only）
  docker-test:
    name: Docker Build Test
    needs: unit-tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build API image
        run: docker build --pull -t cyberpuppy-api:test -f api/Dockerfile .
      - name: Build Bot image
        run: docker build --pull -t cyberpuppy-bot:test -f bot/Dockerfile .
      - name: Smoke-run containers
        run: |
          docker run --rm cyberpuppy-api:test python -c "import fastapi; print('API OK')"
          docker run --rm cyberpuppy-bot:test python -c "import linebot; print('Bot OK')"

  # 4) Code Quality（你原本允許忽略錯誤，這裡保留 but 可觀測）
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy
      - name: Black
        run: black --check --diff src/ tests/ api/ bot/
      - name: isort
        run: isort --check-only --diff src/ tests/ api/ bot/
      - name: flake8
        run: flake8 src/ tests/ api/ bot/ --config=.flake8

  # 5) Security（工具常變動，保留非阻斷）
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety
      - name: Bandit
        run: bandit -r src/ api/ bot/ -ll
      - name: Safety
        run: safety check || true

  # 6) Windows：只驗證最基本單元測試（不跑 Docker/整合）
  windows-test:
    name: Windows Basic
    if: github.event_name == 'pull_request'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Run basic tests
        run: pytest tests/test_*.py -v --maxfail=10

  # 7) CI Summary（彙總結果）
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs:
      - basic-tests
      - unit-tests
      - integration-tests
      - docker-test
      - code-quality
      - security
      - windows-test
    steps:
      - name: Generate summary
        run: |
          echo "# CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Basic Tests | ${{ needs.basic-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker | ${{ needs.docker-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows | ${{ needs.windows-test.result }} |" >> $GITHUB_STEP_SUMMARY